# -*- coding: utf-8 -*-
"""matlab building counting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sGA0gXuSCbbIt7DMxjWF2i8xD-vczPAv
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from google.colab.patches import cv2_imshow
from PIL import Image
import cv2
import skimage.morphology as morph
from scipy import ndimage

path ="/content/Image_0.jpg"

image = cv2.imread(path)
#cv2_imshow(image)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
#cv2_imshow(gray)
gray = cv2.bitwise_not(gray)
#cv2_imshow(gray)


ret2,th2 = cv2.threshold(gray,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
cv2_imshow(th2)


se = np.ones((2,2),np.uint8)
bw= cv2.erode(th2,se, iterations =1)
cv2_imshow(bw)

bw2 = cv2.dilate(bw, se, iterations=1)
cv2_imshow(bw2)

bw3 = morph.remove_small_objects(bw2, min_size=50, connectivity=4)
cv2_imshow(bw3)

I_fill = ndimage.binary_fill_holes(bw3).astype(int)
cv2_imshow(I_fill)

I_fill = np.uint8(I_fill)
I_bruit = cv2.erode(I_fill,se, iterations = 1)
i_bruit = cv2.dilate(I_fill,se,iterations = 1)
cv2_imshow(I_bruit)


##########################################################################


#img = Image.open(path).convert('LA')
#img.save('greyscale.png')

#threshold (gray, bin_image, 0, 255, THRESH_BINARY | THRESH_OTSU );

#th3 = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)
#cv2_imshow(th3)

#img = mpimg.imread(gray)



#img=mpimg.imread(gray)
#imgplot = plt.imshow(img)
#plt.show()

